
image: atlassian/default-image:2

pipelines:
  default:
    - step:
        name: Make Docker image names available for following steps
        script:
          - echo "LATEST_IMAGE=${DOCKERHUB_REPO_OWNER}/loancalculator:bitbucket-latest" > ENV_VARS.txt
          - echo "TAGGED_IMAGE=${DOCKERHUB_REPO_OWNER}/loancalculator:bitbucket-$(git log -1 --pretty=%h)" >> ENV_VARS.txt
        artifacts:
          - ENV_VARS.txt


    - step:
        name: Declare Merkely Pipeline
        services:
          - docker
        caches:
          - docker
        script:
          - docker run --rm
              --env MERKELY_COMMAND=declare_pipeline
              --env MERKELY_API_TOKEN=${MERKELY_API_TOKEN}
              --volume ${PWD}/Merkelypipe.bitbucket.json:/data/Merkelypipe.json
              merkely/change


    - step:
        name: Build and publish Docker image
        services:
          - docker
        caches:
          - docker
        script:
          - export $(cat ENV_VARS.txt | xargs)
          - docker build --file ${PWD}/Dockerfile --tag ${TAGGED_IMAGE} ${PWD}
          - docker tag ${TAGGED_IMAGE} ${LATEST_IMAGE}
          - echo ${DOCKERHUB_DEPLOY_TOKEN} | docker login --username ${DOCKERHUB_DEPLOY_USERNAME} --password-stdin
          - docker push ${TAGGED_IMAGE}
          - docker push ${LATEST_IMAGE}


    - step:
        name: Make Docker image digest available for following steps
        services:
          - docker
        caches:
          - docker
        script:
          - export $(cat ENV_VARS.txt | xargs)
          - docker pull ${TAGGED_IMAGE}
          - SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' ${TAGGED_IMAGE} | cut -d ':' -f 2)
          - echo "SHA256=${SHA256}" >> ENV_VARS.txt
        artifacts:
          - ENV_VARS.txt


    - step:
        name: Log Docker image in Merkely
        services:
          - docker
        caches:
          - docker
        script:
          - export $(cat ENV_VARS.txt | xargs)
          - docker run
            --env MERKELY_COMMAND=log_artifact
            --env MERKELY_FINGERPRINT=sha256://${SHA256}/${TAGGED_IMAGE}
            --env MERKELY_IS_COMPLIANT=TRUE
            --env MERKELY_API_TOKEN=${MERKELY_API_TOKEN}
            --env BITBUCKET_WORKSPACE
            --env BITBUCKET_REPO_SLUG
            --env BITBUCKET_COMMIT
            --env BITBUCKET_BUILD_NUMBER
            --rm
            --volume ${PWD}/Merkelypipe.bitbucket.json:/data/Merkelypipe.json
            merkely/change


    - step:
        name: Run unit tests and log results in Merkely
        services:
          - docker
        caches:
          - docker
        script:
          - export $(cat ENV_VARS.txt | xargs)
          # Run the units tests, write results to build/test/pytest_unit.xml
          - docker run
            --name container
            --entrypoint ./entrypoint-unit_test.sh
            ${TAGGED_IMAGE}
          - mkdir -p build/test
          - docker cp container:/code/build/test/ ${PWD}/build
          - docker rm container
          # Log test results in Merkely
          - TEST_RESULTS_FILE=build/test/pytest_unit.xml
          - docker run
              --env MERKELY_COMMAND=log_test
              --env MERKELY_FINGERPRINT=sha256://${SHA256}/${TAGGED_IMAGE}
              --env MERKELY_EVIDENCE_TYPE=unit_test
              --env MERKELY_API_TOKEN=${MERKELY_API_TOKEN}
              --env BITBUCKET_WORKSPACE
              --env BITBUCKET_REPO_SLUG
              --env BITBUCKET_BUILD_NUMBER
              --rm
              --volume ${PWD}/${TEST_RESULTS_FILE}:/data/junit/junit.xml
              --volume ${PWD}/Merkelypipe.bitbucket.json:/data/Merkelypipe.json
              merkely/change


    - step:
        name: Run security analysis and log results in Merkely
        services:
          - docker
        caches:
          - docker
        script:
          - export $(cat ENV_VARS.txt | xargs)
          # Run bandit security, write results directly to build/security/security.xml
          - mkdir -p build/security
          - docker run
              --rm
              --volume ${PWD}/build:/code/build
              --entrypoint ./entrypoint-security.sh
              ${TAGGED_IMAGE}
          # Log security results in Merkely
          - SECURITY_RESULTS_FILE=build/security/security.xml
          - docker run
            --env MERKELY_COMMAND=log_test
            --env MERKELY_FINGERPRINT=sha256://${SHA256}/${TAGGED_IMAGE}
            --env MERKELY_EVIDENCE_TYPE=security
            --env MERKELY_API_TOKEN=${MERKELY_API_TOKEN}
            --env BITBUCKET_WORKSPACE
            --env BITBUCKET_REPO_SLUG
            --env BITBUCKET_BUILD_NUMBER
            --rm
            --volume ${PWD}/${SECURITY_RESULTS_FILE}:/data/junit/junit.xml
            --volume ${PWD}/Merkelypipe.bitbucket.json:/data/Merkelypipe.json
            merkely/change

