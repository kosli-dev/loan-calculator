
image: atlassian/default-image:2


definitions:
  export_image_name_env_vars: &export_image_name_env_vars |
    export MERKELY_OWNER="compliancedb"
    export MERKELY_PIPELINE="bitbucket-loancalculator"
    export LATEST_IMAGE="${DOCKERHUB_REPO_OWNER}/loancalculator:bitbucket-latest"
    export TAGGED_IMAGE="${DOCKERHUB_REPO_OWNER}/loancalculator:bitbucket-$(git log -1 --pretty=%h)"

  export_image_sha256_env_var: &export_image_sha256_env_var |
    docker pull ${TAGGED_IMAGE}
    export SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' ${TAGGED_IMAGE} | cut -d ':' -f 2)

  steps:

    - step: &merkely_declare_pipeline
        name: Declare Merkely Pipeline
        services: [ docker ]
        caches: [ docker ]
        script:
          - docker pull merkely/change:latest
          - docker run
            --env MERKELY_COMMAND=declare_pipeline
            --env MERKELY_API_TOKEN=${MERKELY_API_TOKEN}
            --rm
            --volume ${PWD}/Merkelypipe.bitbucket.json:/data/Merkelypipe.json
            merkely/change


    - step: &build_and_publish_docker_image
        name: Build and publish Docker image
        services: [ docker ]
        caches: [ docker ]
        script:
          - *export_image_name_env_vars
          - docker build --file ${PWD}/Dockerfile --tag ${TAGGED_IMAGE} ${PWD}
          - docker tag ${TAGGED_IMAGE} ${LATEST_IMAGE}
          - echo ${DOCKERHUB_DEPLOY_TOKEN} | docker login --username ${DOCKERHUB_DEPLOY_USERNAME} --password-stdin
          - docker push ${TAGGED_IMAGE}
          - docker push ${LATEST_IMAGE}


    - step: &merkely_log_docker_image
        name: Log Docker image in Merkely
        services: [ docker ]
        caches: [ docker ]
        script:
          - *export_image_name_env_vars
          - *export_image_sha256_env_var
          - docker run
            --env MERKELY_COMMAND=log_artifact
            --env MERKELY_FINGERPRINT=sha256://${SHA256}/${TAGGED_IMAGE}
            --env MERKELY_IS_COMPLIANT=TRUE
            --env MERKELY_API_TOKEN=${MERKELY_API_TOKEN}
            --env BITBUCKET_WORKSPACE
            --env BITBUCKET_REPO_SLUG
            --env BITBUCKET_COMMIT
            --env BITBUCKET_BUILD_NUMBER
            --rm
            --volume ${PWD}/Merkelypipe.bitbucket.json:/data/Merkelypipe.json
            merkely/change


    - step: &run_unit_tests
        name: Run Units Tests, Write Results to build/test/pytest_unit.xml
        services: [ docker ]
        caches: [ docker ]
        script:
          - *export_image_name_env_vars
          - *export_image_sha256_env_var
          - docker run
            --name container
            --entrypoint ./entrypoint-unit_test.sh
            ${TAGGED_IMAGE}
          - mkdir -p build/test
          - docker cp container:/code/build/test/ ${PWD}/build
          - docker rm container
        artifacts:
          - build/test/pytest_unit.xml


    - step: &merkely_log_unit_tests_results
        name: Log Unit Tests Results to Merkely
        services: [ docker ]
        caches: [ docker ]
        script:
          - *export_image_name_env_vars
          - *export_image_sha256_env_var
          - TEST_RESULTS_FILE=build/test/pytest_unit.xml
          - docker run
              --env MERKELY_COMMAND=log_test
              --env MERKELY_FINGERPRINT=sha256://${SHA256}/${TAGGED_IMAGE}
              --env MERKELY_EVIDENCE_TYPE=unit_test
              --env MERKELY_API_TOKEN=${MERKELY_API_TOKEN}
              --env BITBUCKET_WORKSPACE
              --env BITBUCKET_REPO_SLUG
              --env BITBUCKET_BUILD_NUMBER
              --rm
              --volume ${PWD}/${TEST_RESULTS_FILE}:/data/junit/junit.xml
              --volume ${PWD}/Merkelypipe.bitbucket.json:/data/Merkelypipe.json
              merkely/change


    - step: &run_security_analysis
        name: Run Security Analysis, Write Results to build/security/security.xml
        services: [ docker ]
        caches: [ docker ]
        script:
          - *export_image_name_env_vars
          - mkdir -p build/security
          - docker run
              --rm
              --volume ${PWD}/build:/code/build
              --entrypoint ./entrypoint-security.sh
              ${TAGGED_IMAGE}
        artifacts:
          - build/security/security.xml


    - step: &merkely_log_security_results
        name: Log Security Results in Merkely
        services: [ docker ]
        caches: [ docker ]
        script:
          - *export_image_name_env_vars
          - *export_image_sha256_env_var
          - SECURITY_RESULTS_FILE=build/security/security.xml
          - docker run
            --env MERKELY_COMMAND=log_test
            --env MERKELY_FINGERPRINT=sha256://${SHA256}/${TAGGED_IMAGE}
            --env MERKELY_EVIDENCE_TYPE=security
            --env MERKELY_API_TOKEN=${MERKELY_API_TOKEN}
            --env BITBUCKET_WORKSPACE
            --env BITBUCKET_REPO_SLUG
            --env BITBUCKET_BUILD_NUMBER
            --rm
            --volume ${PWD}/${SECURITY_RESULTS_FILE}:/data/junit/junit.xml
            --volume ${PWD}/Merkelypipe.bitbucket.json:/data/Merkelypipe.json
            merkely/change


    - step: &run_coverage_analysis
        name: Run Coverage Analysis, Write Summary to build/coverage/coverage_summary.sh
        services: [ docker ]
        caches: [ docker ]
        script:
          - *export_image_name_env_vars
          - mkdir -p build/coverage
          - docker run
              --entrypoint ./entrypoint-coverage.sh
              --rm
              --volume ${PWD}/build:/code/build
              ${TAGGED_IMAGE}
        artifacts:
          - build/coverage/coverage_summary.sh


    - step: &merkely_log_coverage_results
        name: Log Coverage Analysis Results in Merkely
        services: [ docker ]
        caches: [ docker ]
        script:
          - *export_image_name_env_vars
          - *export_image_sha256_env_var
          - source build/coverage/coverage_summary.sh
          - pipe: docker://merkely/change:latest
            variables:
              MERKELY_COMMAND: "log_evidence"
              MERKELY_OWNER: "${MERKELY_OWNER}"
              MERKELY_PIPELINE: "${MERKELY_PIPELINE}"
              MERKELY_FINGERPRINT: "sha256://${SHA256}/${TAGGED_IMAGE}"
              MERKELY_EVIDENCE_TYPE: "coverage"
              MERKELY_IS_COMPLIANT: "TRUE"
              MERKELY_DESCRIPTION: "${COVERAGE_SUMMARY}"
              MERKELY_API_TOKEN: "${MERKELY_API_TOKEN}"


    - step: &deploy_to_staging
        name: Deploy to staging
        script:
          - echo YOUR DEPLOYMENT COMMAND HERE


    - step: &merkely_log_deployment
        name: Log deployment in Merkely
        services: [ docker ]
        caches: [ docker ]
        script:
          - *export_image_name_env_vars
          - *export_image_sha256_env_var
          - pipe: docker://merkely/change:latest
            variables:
              MERKELY_COMMAND: "log_deployment"
              MERKELY_OWNER: "${MERKELY_OWNER}"
              MERKELY_PIPELINE: "${MERKELY_PIPELINE}"
              MERKELY_FINGERPRINT: "sha256://${SHA256}/${TAGGED_IMAGE}"
              MERKELY_DESCRIPTION: "Deployed to staging in pipeline"
              MERKELY_ENVIRONMENT: "staging"
              MERKELY_API_TOKEN: "${MERKELY_API_TOKEN}"


pipelines:
  default:
    - step: *merkely_declare_pipeline
    - step: *build_and_publish_docker_image
    - step: *merkely_log_docker_image
    - step: *run_unit_tests
    - step: *merkely_log_unit_tests_results
    - step: *run_security_analysis
    - step: *merkely_log_security_results
    - step: *run_coverage_analysis
    - step: *merkely_log_coverage_results
    - step: *deploy_to_staging
    - step: *merkely_log_deployment
