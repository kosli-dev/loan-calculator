
clone:
  depth: full

image: atlassian/default-image:2

definitions:

  export_image_env_vars: &export_image_env_vars |
    export IMAGE_TAGGED="${DOCKERHUB_REPO_OWNER}/loancalculator:bitbucket-$(git log -1 --pretty=%h)"
    export IMAGE_LATEST="${DOCKERHUB_REPO_OWNER}/loancalculator:bitbucket-latest"

  export_merkely_fingerprint_env_var: &export_merkely_fingerprint_env_var |
    export IMAGE_TAGGED="${DOCKERHUB_REPO_OWNER}/loancalculator:bitbucket-$(git log -1 --pretty=%h)"
    docker pull ${IMAGE_TAGGED}
    export SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' ${IMAGE_TAGGED} | cut -d ':' -f 2)
    export MERKELY_FINGERPRINT="sha256://${SHA256}/${IMAGE_TAGGED}"

  export_merkely_pipe_path_env_var: &export_merkely_pipe_path_env_var |
    export MERKELY_PIPE_PATH="${PWD}/Merkelypipe.bitbucket.json"

  steps:

    - step: &merkely_declare_pipeline
        name: Declare Merkely Pipeline
        services: [ docker ]
        script:
          - *export_merkely_pipe_path_env_var
          - pipe: docker://merkely/change:latest
            variables:
              MERKELY_COMMAND: "declare_pipeline"
              MERKELY_PIPE_PATH: "${MERKELY_PIPE_PATH}"
              MERKELY_API_TOKEN: "${MERKELY_API_TOKEN}"


    - step: &build_and_publish_docker_image
        name: Build and publish Docker image
        services: [ docker ]
        script:
          - *export_image_env_vars
          - docker build --file ${PWD}/Dockerfile --tag ${IMAGE_TAGGED} ${PWD}
          - docker tag ${IMAGE_TAGGED} ${IMAGE_LATEST}
          - echo ${DOCKERHUB_DEPLOY_TOKEN} | docker login --username ${DOCKERHUB_DEPLOY_USERNAME} --password-stdin
          - docker push ${IMAGE_TAGGED}
          - docker push ${IMAGE_LATEST}


    - step: &merkely_log_docker_image
        name: Log Docker image in Merkely
        services: [ docker ]
        script:
          - *export_merkely_fingerprint_env_var
          - *export_merkely_pipe_path_env_var
          - pipe: docker://merkely/change:latest
            variables:
              MERKELY_COMMAND: "log_artifact"
              MERKELY_FINGERPRINT: "${MERKELY_FINGERPRINT}"
              MERKELY_IS_COMPLIANT: "TRUE"
              MERKELY_PIPE_PATH: "${MERKELY_PIPE_PATH}"
              MERKELY_API_TOKEN: "${MERKELY_API_TOKEN}"


    - step: &run_unit_tests
        name: Run units tests, log results in Merkely
        services: [ docker ]
        script:
          - *export_merkely_fingerprint_env_var
          - *export_merkely_pipe_path_env_var
          - docker run
            --name container
            --entrypoint ./entrypoint-unit_test.sh
            ${IMAGE_TAGGED}
          - mkdir -p build/test
          - docker cp container:/code/build/test/ ${PWD}/build
          - docker rm container
          - # Log results in Merkely
          - pipe: docker://merkely/change:latest
            variables:
              MERKELY_COMMAND: "log_test"
              MERKELY_FINGERPRINT: "${MERKELY_FINGERPRINT}"
              MERKELY_EVIDENCE_TYPE: "unit_test"
              MERKELY_TEST_RESULTS_DIR: "${PWD}/build/test/"
              MERKELY_PIPE_PATH: "${MERKELY_PIPE_PATH}"
              MERKELY_API_TOKEN: "${MERKELY_API_TOKEN}"


    - step: &run_security_analysis
        name: Run security analysis, log results in Merkely
        services: [ docker ]
        script:
          - *export_merkely_fingerprint_env_var
          - *export_merkely_pipe_path_env_var
          - mkdir -p build/security
          - docker run
              --rm
              --volume ${PWD}/build:/code/build
              --entrypoint ./entrypoint-security.sh
              ${IMAGE_TAGGED}
          - # Log results in Merkely
          - pipe: docker://merkely/change:latest
            variables:
              MERKELY_COMMAND: "log_test"
              MERKELY_FINGERPRINT: "${MERKELY_FINGERPRINT}"
              MERKELY_EVIDENCE_TYPE: "security"
              MERKELY_TEST_RESULTS_DIR: "${PWD}/build/security/"
              MERKELY_PIPE_PATH: "${MERKELY_PIPE_PATH}"
              MERKELY_API_TOKEN: "${MERKELY_API_TOKEN}"


    - step: &run_coverage_analysis
        name: Run coverage analysis, log results in Merkely
        services: [ docker ]
        script:
          - *export_merkely_fingerprint_env_var
          - *export_merkely_pipe_path_env_var
          - mkdir -p build/coverage
          - docker run
              --entrypoint ./entrypoint-coverage.sh
              --rm
              --volume ${PWD}/build:/code/build
              ${IMAGE_TAGGED}
          - # Log results in Merkely
          - source build/coverage/coverage_summary.sh
          - pipe: docker://merkely/change:latest
            variables:
              MERKELY_COMMAND: "log_evidence"
              MERKELY_FINGERPRINT: "${MERKELY_FINGERPRINT}"
              MERKELY_EVIDENCE_TYPE: "coverage"
              MERKELY_IS_COMPLIANT: "TRUE"
              MERKELY_DESCRIPTION: "${COVERAGE_SUMMARY}"
              MERKELY_PIPE_PATH: "${MERKELY_PIPE_PATH}"
              MERKELY_API_TOKEN: "${MERKELY_API_TOKEN}"


    - step: &deploy_to_staging
        name: Deploy to staging, log deployment in Merkely
        services: [ docker ]
        script:
          - echo YOUR DEPLOYMENT COMMAND HERE
          - # Log deployment in Merkely
          - *export_merkely_fingerprint_env_var
          - *export_merkely_pipe_path_env_var
          - pipe: docker://merkely/change:latest
            variables:
              MERKELY_COMMAND: "log_deployment"
              MERKELY_FINGERPRINT: "${MERKELY_FINGERPRINT}"
              MERKELY_DESCRIPTION: "Deployed to staging in pipeline"
              MERKELY_ENVIRONMENT: "staging"
              MERKELY_PIPE_PATH: "${MERKELY_PIPE_PATH}"
              MERKELY_API_TOKEN: "${MERKELY_API_TOKEN}"


    - step: &request_approval_for_deployment
        name: Request approval for deployment in Merkely
        services: [ docker ]
        script:
          - *export_merkely_fingerprint_env_var
          - *export_merkely_pipe_path_env_var
          - pipe: docker://merkely/change:latest
            variables:
              MERKELY_COMMAND: "log_approval"
              MERKELY_FINGERPRINT: "${MERKELY_FINGERPRINT}"
              MERKELY_OLDEST_SRC_COMMITISH: "origin/production"
              MERKELY_NEWEST_SRC_COMMITISH: "${BITBUCKET_COMMIT}"
              MERKELY_DESCRIPTION: "Production release requested"
              MERKELY_IS_APPROVED: "FALSE"
              MERKELY_SRC_REPO_ROOT: "${PWD}"
              MERKELY_PIPE_PATH: "${MERKELY_PIPE_PATH}"
              MERKELY_API_TOKEN: "${MERKELY_API_TOKEN}"


    - step: &deploy_to_production
        name: Deploy to Production
        services: [ docker ]
        trigger: manual
        script:
          - *export_merkely_fingerprint_env_var
          - *export_merkely_pipe_path_env_var
          - pipe: docker://merkely/change:latest
            variables:
              MERKELY_COMMAND: "control_deployment"
              MERKELY_FINGERPRINT: "${MERKELY_FINGERPRINT}"
              MERKELY_PIPE_PATH: "${MERKELY_PIPE_PATH}"
              MERKELY_API_TOKEN: "${MERKELY_API_TOKEN}"

          - echo YOUR DEPLOYMENT COMMAND HERE

          - pipe: docker://merkely/change:latest
            variables:
              MERKELY_COMMAND: "log_deployment"
              MERKELY_FINGERPRINT: "${MERKELY_FINGERPRINT}"
              MERKELY_DESCRIPTION: "Deployed to production in pipeline"
              MERKELY_ENVIRONMENT: "production"
              MERKELY_PIPE_PATH: "${MERKELY_PIPE_PATH}"
              MERKELY_API_TOKEN: "${MERKELY_API_TOKEN}"

          - git checkout --track origin/production
          - git merge ${BITBUCKET_COMMIT}
          - git push origin production


pipelines:
  branches:
    master:
      - step: *merkely_declare_pipeline
      - step: *build_and_publish_docker_image
      - step: *merkely_log_docker_image
      - step: *run_unit_tests
      - step: *run_security_analysis
      - step: *run_coverage_analysis
      - step: *deploy_to_staging
      - step: *request_approval_for_deployment
      - step: *deploy_to_production