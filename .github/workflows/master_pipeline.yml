name: 1/3 Main Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  MERKELY_OWNER: compliancedb
  MERKELY_PIPELINE: loancalculator
  MERKELY_CLI_VERSION: "1.1.0"

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      
      - name: Add Docker image names to GITHUB_ENV
        run: |
          echo "IMAGE_TAGGED=${{ secrets.DOCKERHUB_REPO_OWNER }}/loancalculator:$(git log -1 --pretty=%h)" >> ${GITHUB_ENV}
          echo "IMAGE_LATEST=${{ secrets.DOCKERHUB_REPO_OWNER }}/loancalculator:latest" >> ${GITHUB_ENV}
          echo "IMAGE=${{ secrets.DOCKERHUB_REPO_OWNER }}/loancalculator" >> ${GITHUB_ENV}

      - name: Download merkely cli client
        id: download-merkely-cli
        run: |
          wget https://github.com/merkely-development/cli/releases/download/v${{ env.MERKELY_CLI_VERSION }}/merkely_${{ env.MERKELY_CLI_VERSION }}_linux_amd64.tar.gz
          tar -xf merkely_${{ env.MERKELY_CLI_VERSION }}_linux_amd64.tar.gz


      - name: Declare Merkely pipeline
        env:
          MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }}
        run:
          ./merkely pipeline declare
            --description "The loan calculator application"
            --template "artifact,unit_test,security,coverage"
            --visibility public


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1


      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_DEPLOY_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}


      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.IMAGE_TAGGED }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max
          build-args: |
            COMMIT_SHA=${{ github.sha }}


      - name: Make the image digest available for following steps
        id: digest-prep
        run: |
          ARTIFACT_SHA=$( echo ${{ steps.docker_build.outputs.digest }} | sed 's/.*://')
          echo "DIGEST=$ARTIFACT_SHA" >> ${GITHUB_ENV}
          echo ::set-output name=image-digest::${ARTIFACT_SHA}


      - name: Log Docker image in Merkely
        env:
          MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }}
        run:
          ./merkely pipeline artifact report creation ${{ env.IMAGE_TAGGED }}
            --sha256 ${{ env.DIGEST }}


      - name: Run unit tests
        run: |
          # Write results to ./build/test/
          docker run \
              --name container \
              --entrypoint ./entrypoint-unit_test.sh \
              ${{ env.IMAGE_TAGGED }}
          mkdir -p build/test
          docker cp container:/code/build/test/ ${PWD}/build
          docker rm container


      - name: Log unit test results in Merkely
        env:
          MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }}
        run:
          ./merkely pipeline artifact report evidence test ${{ env.IMAGE_TAGGED }}
            --evidence-type unit_test
            --results-dir ${{ github.workspace }}/build/test
            --sha256 ${{ env.DIGEST }}


      - name: Run security analysis
        run: |
          # Run bandit security. Write results to ./build/security/
          mkdir -p build/security
          docker run \
                  --rm \
                  --volume ${PWD}/build:/code/build \
                  --entrypoint ./entrypoint-security.sh \
                  ${{ env.IMAGE_TAGGED }}


      - name: Log security results in Merkely
        env:
          MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }}
        run:
          ./merkely pipeline artifact report evidence test ${{ env.IMAGE_TAGGED }}
            --evidence-type security
            --results-dir ${{ github.workspace }}/build/security
            --sha256 ${{ env.DIGEST }}


      - name: Run coverage
        run: |
          # Write summary to build/coverage/coverage_summary.sh
          mkdir -p build/coverage
          docker run \
                  --rm \
                  --volume ${PWD}/build:/code/build \
                  --entrypoint ./entrypoint-coverage.sh \
                  ${{ env.IMAGE_TAGGED }}
          source build/coverage/coverage_summary.sh
          echo "COVERAGE_SUMMARY=${COVERAGE_SUMMARY}" >> ${GITHUB_ENV}


      - name: Log coverage results in Merkely
        env:
          MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }}
        run:
          ./merkely pipeline artifact report evidence generic ${{ env.IMAGE_TAGGED }}
            --description ${{ env.COVERAGE_SUMMARY }}
            --evidence-type coverage
            --sha256 ${{ env.DIGEST }}


      - name: Deploy to staging
        run: |
          echo YOUR DEPLOYMENT COMMAND HERE


      - name: Log deployment to staging in Merkely
        env:
          MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }}
        run:
          ./merkely pipeline deployment report ${{ env.IMAGE_TAGGED }}
            --environment staging
            --sha256 ${{ env.DIGEST }}